# Note: values in the template are the default ones

[cpu]
# Control CPU emulation speed:
# "false" - run as fast as possible
# "true" - try to emulate real hardware CPU and memory speeds
speed_real = true

# Execute instructions for this much time (in us) before sleeping.
# Use with caution. If "real" emulation speed is slower than
# it should be, you may need to set granularity to a higher value.
throttle_granularity = 30

# Internal clock interrupt period (in miliseconds)
# Allowed values: 2-100
# Note: cycle lengths available in real hardware are:
# 2, 4, 8, 10, 20, 40, 80
clock_period = 10

# MERA-400 cpu stops when operating system tries to access unconfigured
# memory segment, but this can be changed to work as for user programs
# (only interrupt is fired in such configuration)
stop_on_nomem = true

# 'IN' and 'OU' instructions can be either illegal or legal in user programs
user_io_illegal = true

# AWP (hardware 48-bit floating point and 32-bit fixed point arithmetic) is optional
awp = true

# Enable or disable CPU modifications found in MX-16 CPU:
#  * 17-bit byte addressing,
#  *  additional instructions,
#  *  additional software interrupt,
#  *  interrupts 5 and 11 swapped,
#  *  broader interrupt mask for I/O interrupts
modifications = false

[memory]
# Memory is organized into 16 physical modules. Each module can be
# either elwro or mega. Elwro modules are 32kword big (8 pages),
# mega modules are 64kword in size (16 pages).
# Module 0 always has to be populated with elwro memory.
# Elwro modules are populated starting from 0 up, mega modules
# from 15 down. Module 0 may overlap with mega module

# allowed values: 1-16
elwro_modules = 4

# allowed values: 0-16
mega_modules = 0

# 4kword segments hardwired for OS memory block (taken from module 0)
# allowed values: 1 or 2
hardwired_segments = 2

# Name of a MEGA PROM image file to use instead of the default one.
# Oly the first 8KB of the file is loaded (1 memory egment, 4kwords).
# Unset by default
#mega_prom = mega_prom.img

# Preload a program into OS memory, starting from address 0
preload = program.bin

[sound]
# Internal buzzer emulation.
# For this to work, set speed_real to true
# Note that for sound to work properly logging will most likely
# have to be disabled.
enabled = true

# Sound driver to use: pulseaudio, alsa or file (raw PCM dump)
driver = pulseaudio

# For alsa, this is the output device to use.
# For file output, it's the file name. Unused for pulseaudio.
output = default

# Samplerate.
rate = 48000

# Sound buffer size (in samples, powers of 2).
buffer_len = 128

# Sound output latency (in miliseconds).
# Increase if sound is choppy.
latency = 20

# Software buzzer volume control (0-100)
volume = 8

# Enable or disable speaker frequency response modeling.
# When enabled, EM400 sounds like the real hardware.
# In fact, disabling it is considered a criminal offence.
filter = true

[log]
# Enable or disable logging.
enabled = false

# Name of the log file
file = em400.log

# Select which components write logs for (separated by commas, no spaces allowed.
#
# "<component>,..."
#
# Available components are:
#   em4h - emulator
#   reg, mem, cpu, op, int - registers, memory, cpu cycle, instructions, interrupts
#   io, mx, px, cchr, cmem - general I/O, MULTIX, PLIX, character and memory channel
#   term, 9425, wnch, flop, pnch, pnrd, tape - terminal, mera 9425, winchester, floppy, tape puncher and reader, magnetic tape
#   crk5 - CROOK-5
#   em4h - emulator, general
#   ectl - emulator, remote control
#   all - special "component" to enable or disable all components
#
# Note that logging cpu cycle information slows down the emulation considerably (>1000 times)
components = em4h

# Use line buffered or fully buffered log output.
line_buffered = true

[ui]
# Default user interface to use
interface = curses

# I/O channels configuration.
#
# There are 16 available channels: channel_0 to channel_15.
# Channel is configured by assigning a channel type to the channel.
# Currently available channel types are: multix and char

[io]
channel_1 = multix
channel_15 = char

# I/O devices configuration.
#
# Each device has its own section named devX.Y, where:
#  * X is the channel number which the device connects to
#  * Y is the device number
#
# Every device section requires a device type to be specified. Currently supported types are:
#  * terminal (only for "char" channel type) - serial console terminal
#  * winchester (only for "multix" channel type) - hard disk drive (uses e4i disk images)
#  * floppy (in development, only for "multix" channel type) - 5" floppy drive
#  * floppy8 (in development, only for "char" channel type) - 8" floppy drive (uses raw images)
#
# Other options are specific for each device.
# Below are example device configurations.

# Terminal that can be accessed through TCP connection on port 32000 (using e4term from tools/ directory)
[dev1.4]
type = terminal
transport = tcp
port = 32000

# Terminal connected to /dev/ttyS0 serial port with speed of 9600 baud (8N1)
[dev1.5]
type = terminal
transport = serial
device = /dev/ttyS0
speed = 9600

# 5" floppy drive with floppy1.e4i image
[dev15.20]
type = floppy
image = floppy1.e4i

# Winchester hard disk drive with winchester.e4i image
[dev15.28]
type = winchester
image = winchester.e4i

# 8" floppy drive with two images attached in bays 0 and 1
[dev15.2]
type = floppy8
image_0 = flop8_0.img
image_1 = flop8_1.img

